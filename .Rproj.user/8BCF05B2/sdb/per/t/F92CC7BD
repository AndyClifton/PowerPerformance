{
    "contents" : "\\documentclass[nojss]{jss}\n%\\VignetteEngine{knitr::knitr}\n%\\VignetteIndexEntry{windnrg}\n\n% use examples at http://onepager.togaware.com/KnitRO.pdf\n%\\usepackage{natbib}\n\\usepackage{amsmath}\n\\usepackage{todonotes}\n\n\\newcommand{\\pname}{windnrg}\n\n%% almost as usual\n\\author{Andrew Clifton\\\\ National Renewable Energy Laboratory \\And \nSecond Author\\\\Plus Affiliation}\n\n%% for pretty printing and a nice hypersummary also set:\n\\Plainauthor{Andrew Clifton, Second Author} %% comma-separated\n\\title{Modeling Wind Turbine Performance with \\pname} %% without formatting\n\\Shorttitle{\\pkg{\\pname}: Power Performance Modeling} %% a short title (if necessary)\n\n%% an abstract and keywords\n\\Abstract{\nThe \\pkg{\\pname} package includes a variety of functions that are designed to analyze and display wind turbine power performance data. The package also includes methods to model the turbine performance as a function of inflow conditions, including industry-standard approaches, proposed new standard methods, and research tools. Utility functions are also included to quantify and thus compare the accuracy of the different methods. This package accompanies results that were previously published in \\cite{Clifton_2013_a} and \\cite{Clifton_2013_d}.\n\nAt the time of writing, \\pkg{\\pname} is only available upon request to the author and is supplied without warranty.\n}\n\\Keywords{power curves, wind turbine modeling, machine learning, \\proglang{R}}\n\\Plainkeywords{power curves, wind turbine modeling, machine learning, R} %% without formatting\n%% at least one keyword must be supplied\n\n%% The address of (at least) one author should be given\n%% in the following format:\n\\Address{\nAndrew Clifton\\\\\nTurbine Modeling and Wind Resource Group\\\\\nNational Wind Technology Center\\\\\nNational Renewable Energy Laboratory\\\\\nGolden, Colorado, United States of America\\\\\nE-mail: \\email{andrew.clifton@nrel.gov}\\\\\nURL: \\url{http://http://www.nrel.gov/wind/}\n}\n\n\\begin{document}\n\\maketitle\n\n<<echo=FALSE>>=\nlibrary(knitr)\nopts_chunk$set(prompt = FALSE, \n               verbose = FALSE,\n               tidy = FALSE,\n               width = 70,\n               useFancyQuotes = FALSE)\n@\n\n\\section{Introduction}\nThis vignette describes how the \\pkg{\\pname} package can be used to analyze wind turbine performance data and create different turbine performance models.\n\n\\section{Obtaining and installing the package}\nThe \\pkg{\\pname} package is currently a developer test version. It is not available through the repositories at \\href{http://cran.r-project.org}{CRAN}. To request a copy of the code, please contact \\href{mailto:andrew.clifton@nrel.gov}{andrew.clifton@nrel.gov}.\n\nInstall \\pkg{\\pname} and load the package like any other package. To do this in an R client, set the working directory, detach any existing copies of the package, and load the new one:\n<<>>=\nsetwd(\".\")\nlibrary(\"windnrg\")\n@\n\n\\pkg{\\pname} requires the \\href{http://cran.r-project.org/web/packages/randomForest/index.html}{\\pkg{randomForest}} and \\href{http://cran.r-project.org/web/packages/ggplot2/index.html}{\\pkg{ggplot2}} packages. \n<<echo=FALSE>>=\nrequire(ggplot2)\nrequire(randomForest)\n@\n\n\\section{Turbine performance data set}\nThis vignette uses the \\code{WindPACT1500kW} data set included in the \\pkg{\\pname} package. The \\code{WindPACT1500kW} data set is a combination of inflow wind and turbine power data from simulations of the Wind Partnership for Advanced Component Technologies 1.5 MW wind turbine. The turbine is described in \\citet{Poore_2003_a, Malcolm_32495}. The inflow was simulated using the stochastic wind field modeling tool, Turbsim, to create realistic wind fields for a neutral atmosphere that were then used to force a simulated turbine in the aero-elastic simulator FAST. Data from the inflow simulations and the turbine simulations were post processed using MATLAB to extract 1,524 observations of inflow and turbine response. The process is described in more detail in \\citet{Clifton_2013_a} and \\citet{Clifton_2013_d}. \n\nThe following variables are included in the \\code{WindPACT1500kW} data set:\n\\begin{description}\n\\item[\\code{ws.HH}]{hub-height wind speed (m/s)}\n\\item[\\code{Ti.HH}]{Turbulence intensity at hub height (\\%)}\n\\item[\\code{Shear}]{The exponent of the power law fit to the velocity profile}\n\\item[\\code{ws.eq}]{A rotor-equivalent wind speed (m/s)}\n\\item[\\code{RSS}]{A metric describing the difference between the meaasured velocity profile and an ideal power-law profile}\n\\item[\\code{power.mean}]{The mean power under these conditions (kW)}\n\\item[\\code{power.std}]{The standard deviation of power under these conditions (kW)}\n\\end{description}\n\n\\section{Preparing the data}\n\\subsection{Loading the data}\nThe \\code{WindPACT1500kW} data are loaded using the \\code{data()} function:\n <<>>=\ndata(WindPACT1500kW)\ndata.in <- WindPACT1500kW\n@\n\nWe now have all of the variables listed above in a data frame, \\code{data.in}. To see what's in there, we'll look at the first 3 rows of the data frame:\n \n<<>>=\ndata.in[1:3,]\n@\n\n%\\bibliographystyle{jss}\n\\bibliography{../inst/examples/windenergy}\n\n\\end{document}\n\n\n% \\subsection{Data filtering and checking}\n% The \\code{WindPACT1500kW} data are derived from simulations, and thus are more-or-less `perfect'. No filtering is required. However, if a real-world observational data set is being used, the user should be careful to filter the data before use. Check for (at least) the following:\n% \\begin{itemize}\n% \\item The wind is from sectors where there is no effect of tower or turbine wakes, and the cups and vanes or remote sensing devices are not shadowed by the turbine.\n% \\item Wind speeds are within sensible ranges\n% \\item Power is greater than 0 kW\n% \\end{itemize}\n% \n% To follow the rest of this vignette using your own data, the data should be put into a data frame with the same names as the \\code{WindPACT1500kW} data set.\n% \n% \\subsection{Density correction}\n% If the turbine performance data are derived from simulations or observations that include a range of atmospheric pressure and temperature (and thus density $\\rho$), a useful first step may be to adjust the wind speed $u$ to a reference density ($\\rho_0$) according to the IEC 61400-12-1 standard. For a turbine with `active power control` or pitch control, this is done by scaling the velocity by the cube root of the density ratio:\n% \n% \\begin{equation}\n% u_{adj} = u\\left(\\frac{\\rho}{\\rho_0}\\right)^{1/3}\n% \\end{equation}\n% \n% This is implemented using the function, \\code{PCwsAdjDens()}. Inputs include the wind speed, density associated with that wind speed (in this case fixed at 1.225 kg/m$^3$), and the reference density to use:\n% <<>>=\n% data.in$ws.HH.adj <- PCwsAdjDens(ws = data.in$ws.HH,\n%                                  rho = 1.225,\n%                                  rho.ref = 1.225)\n% @\n% \n% \\subsection{The rotor-equivalent wind speed}\n% \\cite{wagner_2011_a} suggests accounting for the shear in the inflow by calculating a turbine rotor-disk averaged wind speed and using that in place of the hub-height wind speed. The rotor equivalent wind speed (REWS or $u_{eq}$) is defined as\n% \n% \\begin{equation}\n% u_{eq} = \\sum{u_i^3\\frac{A_i}{A}}^{1/3}\n% \\end{equation}\n% \n% \\noindent where $u_i$ is the wind speed in slice $i$, which has area $A_i$.\n% \n% Given an array of wind speeds at different heights, we can use the \\code{GetREWS()} function to calculate the REWS. \\code{GetREWS()} divides the rotor disk into horizontal slices between heights $(z_{i-i} + z_{i})/2$ and $(z_i + z_{i+1})/2$ and calculates the area of each slice. The edges of the slices are constrained to the outer radius of the turbine rotor.\n% \n% \\subsection{Turbine operating region}\n% The turbine operating region (TOR) quantifies how the turbine controls its output power.\n% \\begin{itemize}\n% \\item{Between cut-in and rated wind speed, the turbine is operating at maximum power coefficient. This is known as Region II.}\n% \\item{Between rated and cut-out wind speed, the turbine control system pitches the blades towards feathered to keep the power at the generator's rated power. This is known as Region III.}\n% \\end{itemize}\n% \n% A convenience function, \\code{GetTOR()} is used to code this as a factor:\n% \n% <<>>=\n% data.in$TOR <- GetTOR(data.in$ws.HH, \n%                       ws.rated = 11.5)\n% data.in[1,]\n% @\n% \n% \\subsection{Training and testing data sets}\n% We'll split the \\code{WindPACT1500kW} data into two equal-sized datasets. That gives us a data set to `train' the model, and another to `test' the model that we come up with.\n% \n% <<>>=\n% ntrain = floor(NROW(data.in)/2)\n% train = rep(FALSE,NROW(data.in))\n% train[sample(nrow(data.in), ntrain)] = TRUE\n% data.train = data.in[train == TRUE,]\n% data.test = data.in[train == FALSE,]\n% @\n% \n% \n% \\section{Hub-height wind speed power curves}\n% A power curve is often produced using the `method of binning', whereby the mean power is calculated for 0.5 m/s wind-speed bins. The \\code{PCTrainTurbineModel()} function uses the methods described in \\cite{IEC_61400_12_1} to create the power curve:\n% \n% <<>>=\n% PCmodel <- PCTrainTurbineModel(ws = data.train$ws.HH.adj,\n%                                power = data.train$power.mean)\n% @\n% \n% Notice that we use the density-adjusted, hub-height wind speed \\code{\\$ws.HH.adj} to produce this power curve. If we look at the first few rows of the power curve, we can see the information that it contains:\n% <<>>=\n% PCmodel[1:3,]\n% @\n% \n% We can plot the power curve using \\code{plotPC()}, which is a wrapper around a series of \\pkg{ggplot2} commands. We can use any of \\pkg{ggplot2}'s functions to alter the plot. The power curve in Figure \\ref{fig:PCdemo} was generated using \\code{plotPC(PC.ws.HH.adj) + theme_bw(base_size = 8)}.\n% \n% <<PCdemo, fig.cap=\"The power curve derived from the WindPACT1500kW data set\", fig.pos=\"h\", echo=FALSE, fig.align='center', fig.height = 3, fig.width=5, out.height = '3in', out.width='5in'>>=\n% plotPC(PCmodel) + theme_bw(base_size = 8)\n% @\n% \n% We can query the trained power curve using \\code{PCQueryTurbineModel()} to find the power at a given wind speed. In this example we want the power at a wind speed of 10 m/s:\n% <<>>=\n% PCQueryTurbineModel(power.curve = PCmodel,\n%                     ws = 10)\n% @\n% \n% The problem with the basic power curve is that it doesn't let us account for other effects on power performance than wind speed. the next sections describe some alternative approaches that can add more information in to the power curve.\n% \n% \\section{Zero turbulence power curves}\n% The zero turbulence power curve has been suggested as a way to quantify the effect of turbulence on the turbine power, and then remove it to find the underlying power curve. The turbulence for a new site can then be added back in to the power curve to give a site-specific power curve. This method is included in the 2014 committee draft of a proposed new IEC 61400-12-1 Power Performance Testing standard.\n% \n% To start the method, we need a power curve that includes the mean power and the mean turbulence intensity in each of the bins. This can be obtained using \\code{PCTrainTurbineModel}:\n% \n% <<>>=\n% ZT.init.PC <- PCTrainTurbineModel(ws = data.train$ws.HH.adj,\n%                                   power = data.train$power.mean,\n%                                   ti = data.train$Ti.HH)\n% @\n% \n% Then, we use this power curve to initialize the zero-turbulence power curve. We need to pass in the density at which this power curve was obtained (1.225 kg /m$^3$) and give the turbine diameter, in this case 70 m.\n% \n% <<>>=\n% ZT.param <- ZTTrainInitTurbineModel(PC.values = ZT.init.PC,\n%                                     rho = 1.225,\n%                                     diameter = 70)\n% @\n% \n% The output from \\code{ZTTrainInitTurbineModel()} is used as one of the inputs to \\code{ZTTrainTheoTurbineModel()}, along with the bin-mean values of wind speed, turbulence intensity and power from the power curve:\n% \n% <<>>=\n% ZT.theo <- ZTTrainTheoTurbineModel(PC.param = ZT.param,\n%                                      ui = ZT.init.PC$ws.binmean,\n%                                      ti = ZT.init.PC$ti.binmean,\n%                                      poweri = ZT.init.PC$power.binmean,\n%                                      rho = 1.225)\n% @\n% \n% Finally, those data are used to calculate the zero-turbulence power curve:\n% \n% <<>>=\n% df.PC.zt <- ZTTrainFinalTurbineModel(PC.param = ZT.theo$param,\n%                                      ws = data.train$ws.HH.adj,\n%                                      Ti = data.train$Ti.HH,\n%                                      poweri = data.train$power.mean,\n%                                      diameter = 70)\n% @\n% And we can plot the power curve that we get, using \\code{plotPC(df.PC.zt)}:\n% \n% <<ZTdemo, fig.cap=\"The zero-turbulence power curve derived from the WindPACT1500kW data set\", fig.pos=\"h\", echo=FALSE, fig.align='center', fig.height = 3, fig.width=5, out.height = '3in', out.width='5in'>>=\n% plotPC(df.PC.zt) + theme_bw(base_size = 8)\n% @\n% \n% The final step is to add turbulence \\emph{back} in, so that we can predict performance for a specific site.\n% \n% \\todo[inline]{Need to finish this section.}\n% \n% \\section{Multivariate power curves using random forests}\n% \\pkg{\\pname} also includes interfaces to a multivariate modeling method called `random forests`, which are coded in the package \\pkg{randomForest} \\citep{Liaw_2002_a}. Random forests allow many different inputs (continuous or categorical) to be used to estimate a single output. Random forests have been used to predict turbine power output by \\cite{Clifton_2013_a, Clifton_2013_d}.\n% \n% \\subsection{Creating a random forest model}\n% Our first random forest model will include variables from the \\code{WindPACT1500kW} data set that describe the kinetic energy through the rotor disk (\\code{\\$ws.HH.adj}), the variability of that energy (\\code{\\$Ti.HH}), the shear exponent (\\code{\\$Shear}), and the turbine operating region \\code{\\$TOR}. The variable we want to predict is the mean power in a 10-minute interval, \\code{\\$power.mean}.\n% \n% We can now make data frames for the training and testing data sets. Both the training and testing data set will contain predictors and a response, and need to contain exactly the same variables.\n% <<>>=\n% train.predictors = data.frame(\"ws.HH\" = data.train$ws.HH.adj,\n%                               \"ti\" = data.train$Ti.HH,\n%                               \"shear\" = data.train$Shear,\n%                               \"TOR\" = data.train$TOR)\n% train.response = data.train$power.mean\n% test.predictors = data.frame(\"ws.HH\" = data.test$ws.HH.adj,\n%                              \"ti\" = data.test$Ti.HH,\n%                              \"shear\" = data.test$Shear,\n%                              \"TOR\" = data.test$TOR)\n% test.response = data.test$power.mean\n% @\n% \n% We can confirm that both data frame contain the same variable names with the \\code{names()} function:\n% <<>>=\n% names(train.predictors)\n% names(test.predictors)\n% @\n% \n% Now, working with the training data, we'll train our random forest-based model. We need to pass in the data frames of training data for the predictive variables, and the response.\n% \n% <<>>=\n% RFmodel <- RFTrainTurbineModel(predictors = train.predictors,\n%                                response = train.response)\n% @\n% \n% Our random forest model is now ready for use.\n% \n% \\subsection{Querying the random forest model}\n% Now that we have a model of the turbine, we can query it to find the predicted response to a new set of conditions using \\code{RFQueryTurbineModel()}. We can use the first row of the test data set to illustrate this.\n% \n% <<>>=\n% RFQueryTurbineModel(predictors = test.predictors[1,],\n%                     model = RFmodel)\n% @\n% \n% It is very important that the data frame we use to query the model (the \\code{predictors = ...} argument) has exactly the same names as the training data set.\n% \n% We can limit our query to the mean power, too:\n% <<>>=\n% RFQueryTurbineModel(predictors = test.predictors[1,],\n%                     model = RFmodel)$mean\n% @\n% \n% A convenience function \\code{RFTrainTestTurbineModel} combines the training and testing of the RF model, and outputs the results.\n% \n% <<>>=\n% RFTrainTestTurbineModel(train.predictors,\n%                         train.response,\n%                         test.predictors,\n%                         test.response)  \n% @\n% \n% \\subsection{Creating custom random forest models}\n% There are some important things to remember when putting the random forest model together:\n% \\begin{enumerate}\n% \\item The model can be used to predict any single variable as a function of any input. For example, \\cite{Clifton_2013_d} show that it may be possible to predict loads at a turbine deployment site as a function of wind speed, turbulence, and shear using a random forest model trained by high-fidelity simulations.\n% \\item The same variable names need to be present in the training data frame and the testing data frame.\n% \\item Models should be realistic. Use variables that are important for the turbine response. For the power, that would suggest data that describe the kinetic energy through the rotor disk, the variability of that inflow, and the ability of the turbine to harvest that energy. Also, a variable that describes the turbine controller may help - this could be as simple as the operating region, or possibly some constants within the controller. \n% \\end{enumerate}\n% \n% \\subsection{Limitations of the random forest method}\n% The chief limitation of the random forest method is that it requires the model to be trained with data that encompass the likely range of new cases. This is because the model is a statistically-based approach, rather than physics-based. For example, if the model is only trained with data where wind speeds are less than 10 m/s, a prediction at 12 m/s would be unwise. However, given knowledge of a turbine's rotor size, rated speed, and rated power, an engineer would be able to estimate the likely power at this new wind speed (albeit roughly).\n% \n% \\section{Comparing models}\n% We can test how accurate the different models are, compared to each other. First, we create a new data frame and add a column for the observed power in the testing data frame:\n% \n% <<>>=\n% PredPower <- data.frame(obs = data.test$power.mean)\n% @\n% \n% We can compare the observed power during the test, to predictions made using our power curve and the observed wind speed:\n% \n% <<>>=\n% PredPower$PC <- PCQueryTurbineModel(ws = data.test$ws.HH.adj,\n%                                     power.curve = PCmodel)\n% @\n% \n% And, we can query the random forest model to find out the power that could be achieved under the new forcing conditions in the \\code{data.test} data frame.\n% \n% <<>>=\n% PredPower$RF <- RFQueryTurbineModel(predictors = test.predictors,\n%                                     model = RFmodel)$mean\n% @\n% \n% Plotting this data (Figure \\ref{fig:PCversusRF}), we see that the random forest method has a much smaller error with respect to the observed power, than the power curve method.\n% <<PCversusRF, fig.cap=\"Comparison of the power predicted using the power curve and random forest methods\", fig.pos=\"h\", echo=FALSE, fig.align='center', fig.height = 3, fig.width=5, out.height = '3in', out.width='5in'>>=\n% ggplot(data = PredPower,\n%        aes(x = obs)) +\n%   geom_point(aes(y = PC, \n%                  colour = \"PC\"),\n%              size = 1.5) +\n%   geom_point(aes(y = RF,\n%                  colour = \"RF\"),\n%              size = 1.5)+\n%   scale_color_manual(name = \"Prediction method\",\n%                      breaks = c(\"PC\",\"RF\"),\n%                      labels = c(\"Power curve\", \"Random Forest\"),\n%                      values = c(\"grey50\",\"red\")) +\n%   scale_x_continuous(name = \"Observed power (kW)\") +\n%   scale_y_continuous(name = \"Predicted power (kW)\") +\n%   theme_bw(base_size = 8) +\n%   theme(legend.justification=c(0,1), legend.position=c(0,1))\n% @\n% \n% We can get some error metrics for the different models, too:\n% <<>>=\n% GetErrorMetrics(y = PredPower$obs,\n%                 ymod = PredPower$PC)\n% GetErrorMetrics(y = PredPower$obs,\n%                 ymod = PredPower$RF)\n% @\n% \n% \\section{Future developments}\n% Ideas for future developments of the \\pkg{\\pname} package should be sent to \\href{mailto:andrew.clifton@nrel.gov}{andrew.clifton@nrel.gov}. Ideas that come with code snippets and functions that fit the framework of the package are very welcome!\n% \n% Current ideas include:\n% \\begin{itemize}\n% \\item Create a wrapper, e.g. \\code{ZTTrainTurbineModel()}, to train a zero-turbulence power curve for a specific site\n% \\end{itemize}\n",
    "created" : 1406140185752.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4040894274",
    "id" : "F92CC7BD",
    "lastKnownWriteTime" : 1406141116,
    "path" : "~/Documents/public/code/R/windnrg/vignettes/powercurves.Rnw",
    "project_path" : "vignettes/powercurves.Rnw",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "sweave"
}